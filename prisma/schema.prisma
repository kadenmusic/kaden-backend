generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  first    String
  last     String
  email    String @unique
  phone    String @unique
  username String @unique
  password String

  profile  Profile?
  posts    Post[]
  comments Comment[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  likes      Like[]
  followedBy Follow[] @relation("following")
  following  Follow[] @relation("follower")
}

model Profile {
  id        String   @id @default(uuid())
  bio       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  active    Boolean   @default(true)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  track     Track     @relation(fields: [trackId], references: [id])
  trackId   String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Track {
  id                 String    @id @default(uuid())
  type               TrackType
  title              String
  artist             String
  albumTitle         String
  spotifyImageUrl    String    @default("")
  appleMusicImageUrl String    @default("")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  posts              Post[]
}

enum TrackType {
  SONG
  PODCAST
  AUDIOBOOK
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Media {
  id        String         @id @default(uuid())
  type      MediaType
  usageType MediaUsageType
  url       String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum MediaUsageType {
  PROFILE_PICTURE
  COVER_ART
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}
